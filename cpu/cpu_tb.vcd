$date
	Thu Mar 18 00:30:49 2021
$end
$version
	Icarus Verilog
$end
$timescale
	10ps
$end
$scope module cpu_tb $end
$var wire 8 ! i1 [7:0] $end
$var wire 8 " i2 [7:0] $end
$var wire 8 # i3 [7:0] $end
$var wire 8 $ i4 [7:0] $end
$var wire 8 % o4 [7:0] $end
$var wire 8 & o3 [7:0] $end
$var wire 8 ' o2 [7:0] $end
$var wire 8 ( o1 [7:0] $end
$var reg 1 ) clk $end
$var reg 1 * reset $end
$scope module micpu $end
$var wire 1 ) clk $end
$var wire 8 + i1 [7:0] $end
$var wire 8 , i2 [7:0] $end
$var wire 8 - i3 [7:0] $end
$var wire 8 . i4 [7:0] $end
$var wire 1 * reset $end
$var wire 1 / z $end
$var wire 1 0 wez $end
$var wire 1 1 we5 $end
$var wire 1 2 we4 $end
$var wire 1 3 we3 $end
$var wire 2 4 s_port [1:0] $end
$var wire 1 5 s_pila $end
$var wire 1 6 s_out $end
$var wire 2 7 s_inm [1:0] $end
$var wire 1 8 s_inc $end
$var wire 8 9 reg4_out [7:0] $end
$var wire 8 : reg3_out [7:0] $end
$var wire 8 ; reg2_out [7:0] $end
$var wire 8 < reg1_out [7:0] $end
$var wire 1 = push $end
$var wire 1 > pop $end
$var wire 16 ? opcode [15:0] $end
$var wire 3 @ op_alu [2:0] $end
$scope module cd_1 $end
$var wire 1 A and1_to_reg $end
$var wire 1 B and2_to_reg $end
$var wire 1 C and3_to_reg $end
$var wire 1 D and4_to_reg $end
$var wire 1 ) clk $end
$var wire 8 E i1 [7:0] $end
$var wire 8 F i2 [7:0] $end
$var wire 8 G i3 [7:0] $end
$var wire 8 H i4 [7:0] $end
$var wire 16 I opcode [15:0] $end
$var wire 1 * reset $end
$var wire 1 J sal_dec_3 $end
$var wire 1 K zalu $end
$var wire 1 / z $end
$var wire 1 0 wez $end
$var wire 1 1 we5 $end
$var wire 1 2 we4 $end
$var wire 1 3 we3 $end
$var wire 8 L wd3 [7:0] $end
$var wire 10 M sum_to_mux [9:0] $end
$var wire 16 N sal_mem_pro [15:0] $end
$var wire 1 O sal_del_3 $end
$var wire 1 P sal_dec_4 $end
$var wire 1 Q sal_dec_2 $end
$var wire 1 R sal_dec_1 $end
$var wire 2 S s_port [1:0] $end
$var wire 1 5 s_pila $end
$var wire 1 6 s_out $end
$var wire 2 T s_inm [1:0] $end
$var wire 1 8 s_inc $end
$var wire 8 U reg4_out [7:0] $end
$var wire 8 V reg3_out [7:0] $end
$var wire 8 W reg2_out [7:0] $end
$var wire 8 X reg1_out [7:0] $end
$var wire 8 Y rd2 [7:0] $end
$var wire 8 Z rd1 [7:0] $end
$var wire 1 = push $end
$var wire 1 > pop $end
$var wire 10 [ pila_to_mux [9:0] $end
$var wire 10 \ pc_to_mem [9:0] $end
$var wire 3 ] op_alu [2:0] $end
$var wire 8 ^ mux_to_reg [7:0] $end
$var wire 10 _ mux_to_pc [9:0] $end
$var wire 10 ` mux_to_mux [9:0] $end
$var wire 8 a memdat_to_mux [7:0] $end
$var wire 8 b input_mux_to_mux [7:0] $end
$var wire 8 c alu_to_mux [7:0] $end
$scope module alu1 $end
$var wire 8 d y [7:0] $end
$var wire 1 K zero $end
$var wire 3 e op_alu [2:0] $end
$var wire 8 f b [7:0] $end
$var wire 8 g a [7:0] $end
$var reg 8 h s [7:0] $end
$upscope $end
$scope module banco $end
$var wire 1 ) clk $end
$var wire 4 i ra1 [3:0] $end
$var wire 4 j ra2 [3:0] $end
$var wire 4 k wa3 [3:0] $end
$var wire 1 3 we3 $end
$var wire 8 l wd3 [7:0] $end
$var wire 8 m rd2 [7:0] $end
$var wire 8 n rd1 [7:0] $end
$upscope $end
$scope module dec_1 $end
$var wire 1 R a $end
$var wire 1 Q b $end
$var wire 1 O c $end
$var wire 1 P d $end
$var wire 1 o s0 $end
$var wire 1 p s1 $end
$upscope $end
$scope module ffz $end
$var wire 1 ) clk $end
$var wire 1 K d $end
$var wire 1 * reset $end
$var wire 1 0 carga $end
$var reg 1 / q $end
$upscope $end
$scope module mem_prog $end
$var wire 1 ) clk $end
$var wire 16 q rd [15:0] $end
$var wire 10 r a [9:0] $end
$upscope $end
$scope module mux_1 $end
$var wire 10 s d0 [9:0] $end
$var wire 10 t y [9:0] $end
$var wire 1 8 s $end
$var wire 10 u d1 [9:0] $end
$upscope $end
$scope module mux_2 $end
$var wire 8 v a [7:0] $end
$var wire 8 w b [7:0] $end
$var wire 8 x d [7:0] $end
$var wire 2 y s [1:0] $end
$var wire 8 z c [7:0] $end
$var reg 8 { out [7:0] $end
$upscope $end
$scope module mux_3 $end
$var wire 10 | d0 [9:0] $end
$var wire 10 } y [9:0] $end
$var wire 1 5 s $end
$var wire 10 ~ d1 [9:0] $end
$upscope $end
$scope module mux_4 $end
$var wire 8 !" a [7:0] $end
$var wire 8 "" b [7:0] $end
$var wire 8 #" c [7:0] $end
$var wire 8 $" d [7:0] $end
$var wire 2 %" s [1:0] $end
$var reg 8 &" out [7:0] $end
$upscope $end
$scope module mux_5 $end
$var wire 8 '" d0 [7:0] $end
$var wire 8 (" d1 [7:0] $end
$var wire 8 )" y [7:0] $end
$var wire 1 6 s $end
$upscope $end
$scope module pc $end
$var wire 1 ) clk $end
$var wire 10 *" d [9:0] $end
$var wire 1 * reset $end
$var reg 10 +" q [9:0] $end
$upscope $end
$scope module pila1 $end
$var wire 1 ) clk $end
$var wire 10 ," inpush [9:0] $end
$var wire 1 * reset $end
$var wire 1 = push $end
$var wire 1 > pop $end
$var reg 10 -" outpop [9:0] $end
$var reg 3 ." sp [2:0] $end
$upscope $end
$scope module reg1 $end
$var wire 1 A clk $end
$var wire 8 /" d [7:0] $end
$var wire 1 * reset $end
$var reg 8 0" q [7:0] $end
$upscope $end
$scope module reg2 $end
$var wire 1 B clk $end
$var wire 8 1" d [7:0] $end
$var wire 1 * reset $end
$var reg 8 2" q [7:0] $end
$upscope $end
$scope module reg3 $end
$var wire 1 C clk $end
$var wire 8 3" d [7:0] $end
$var wire 1 * reset $end
$var reg 8 4" q [7:0] $end
$upscope $end
$scope module reg4 $end
$var wire 1 D clk $end
$var wire 8 5" d [7:0] $end
$var wire 1 * reset $end
$var reg 8 6" q [7:0] $end
$upscope $end
$scope module regpro1 $end
$var wire 1 ) clk $end
$var wire 8 7" rd [7:0] $end
$var wire 8 8" wd [7:0] $end
$var wire 12 9" wra [11:0] $end
$var wire 1 2 we4 $end
$upscope $end
$scope module sum1 $end
$var wire 10 :" a [9:0] $end
$var wire 10 ;" b [9:0] $end
$var wire 10 <" y [9:0] $end
$upscope $end
$upscope $end
$scope module uc_1 $end
$var wire 16 =" opcode [15:0] $end
$var wire 1 / z $end
$var reg 3 >" op_alu [2:0] $end
$var reg 1 > pop $end
$var reg 1 = push $end
$var reg 1 8 s_inc $end
$var reg 2 ?" s_inm [1:0] $end
$var reg 1 6 s_out $end
$var reg 1 5 s_pila $end
$var reg 2 @" s_port [1:0] $end
$var reg 1 3 we3 $end
$var reg 1 2 we4 $end
$var reg 1 1 we5 $end
$var reg 1 0 wez $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 @"
b0 ?"
b10 >"
b10000000000000 ="
b1 <"
b1 ;"
b0 :"
b0 9"
b0 8"
b0 7"
b0 6"
b0 5"
b0 4"
b0 3"
b0 2"
b0 1"
b0 0"
b0 /"
b0 ."
bx -"
b0 ,"
b0 +"
b1 *"
b0 )"
b0 ("
b0 '"
bz &"
b0 %"
bz $"
bz #"
bz ""
bz !"
bx ~
b1 }
b1 |
b0 {
b0 z
b0 y
bz x
b0 w
b0 v
b1 u
b1 t
b0 s
b0 r
b10000000000000 q
0p
0o
b0 n
b0 m
b0 l
b0 k
b0 j
b0 i
b0 h
b0 g
b0 f
b10 e
b0 d
b0 c
bz b
b0 a
b1 `
b1 _
b0 ^
b10 ]
b0 \
bx [
b0 Z
b0 Y
b0 X
b0 W
b0 V
b0 U
b0 T
b0 S
1R
0Q
0P
0O
b10000000000000 N
b1 M
b0 L
1K
zJ
b10000000000000 I
bz H
bz G
bz F
bz E
0D
0C
0B
0A
b10 @
b10000000000000 ?
0>
0=
b0 <
b0 ;
b0 :
b0 9
18
b0 7
06
05
b0 4
13
02
01
10
0/
bz .
bz -
bz ,
bz +
1*
1)
b0 (
b0 '
b0 &
b0 %
bz $
bz #
bz "
bz !
$end
#1000
0*
#3000
0)
#6000
b1011 ^
b1011 )"
b1011 /"
b1011 1"
b1011 3"
b1011 5"
b10 _
b10 }
b10 *"
b1011 Y
b1011 f
b1011 m
b1011 '"
xC
1A
b10 `
b10 t
b10 |
b100000 ("
b110010000000 9"
b11001000 w
b1000 j
b1100 i
b10000000 s
b0 @
b0 ]
b0 e
b0 >"
00
11
03
1/
b10 M
b10 u
b10 <"
b1001110010000000 ?
b1001110010000000 I
b1001110010000000 ="
b1001110010000000 N
b1001110010000000 q
b1 \
b1 r
b1 +"
b1 ,"
b1 :"
1)
#9000
0)
#12000
b0 ^
b0 )"
b0 /"
b0 1"
b0 3"
b0 5"
b11 _
b11 }
b11 *"
b0 Y
b0 f
b0 m
b0 '"
0C
0A
b11 `
b11 t
b11 |
b0 ("
b0 9"
b0 w
b0 j
b0 i
b0 s
10
01
13
b11 M
b11 u
b11 <"
b0 ?
b0 I
b0 ="
b0 N
b0 q
b10 \
b10 r
b10 +"
b10 ,"
b10 :"
1)
#15000
0)
#18000
b100 _
b100 }
b100 *"
b100 `
b100 t
b100 |
b100 M
b100 u
b100 <"
b11 \
b11 r
b11 +"
b11 ,"
b11 :"
1)
#21000
0)
#24000
b101 _
b101 }
b101 *"
b101 `
b101 t
b101 |
b101 M
b101 u
b101 <"
b100 \
b100 r
b100 +"
b100 ,"
b100 :"
1)
#27000
0)
#30000
b110 _
b110 }
b110 *"
b110 `
b110 t
b110 |
b110 M
b110 u
b110 <"
b101 \
b101 r
b101 +"
b101 ,"
b101 :"
1)
#33000
0)
#36000
b111 _
b111 }
b111 *"
b111 `
b111 t
b111 |
b111 M
b111 u
b111 <"
b110 \
b110 r
b110 +"
b110 ,"
b110 :"
1)
#39000
0)
#42000
b1000 _
b1000 }
b1000 *"
b1000 `
b1000 t
b1000 |
b1000 M
b1000 u
b1000 <"
b111 \
b111 r
b111 +"
b111 ,"
b111 :"
1)
#45000
0)
#48000
b1001 _
b1001 }
b1001 *"
b1001 `
b1001 t
b1001 |
b1001 M
b1001 u
b1001 <"
b1000 \
b1000 r
b1000 +"
b1000 ,"
b1000 :"
1)
#51000
0)
#54000
b1010 _
b1010 }
b1010 *"
b1010 `
b1010 t
b1010 |
b1010 M
b1010 u
b1010 <"
b1001 \
b1001 r
b1001 +"
b1001 ,"
b1001 :"
1)
